#!/bin/bash
# Initialize-WSLUser.sh - TasksV4 Phase 2.3
# Created: July 6, 2025
# Framework: GuardRails.md Part 11.5 - Virtual Environment
# Purpose: Sandboxed user creation for secure terminal operations (IDEMPOTENT)

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Configuration
MYEXPORTER_USER="${WSL_USER:-myexporter}"
MYEXPORTER_GROUP="myexporter"
MYEXPORTER_HOME="/home/${MYEXPORTER_USER}"
MYEXPORTER_SHELL="/bin/bash"
LOG_FILE="/tmp/myexporter-init.log"

# Idempotency helpers - ensure commands work with or without sudo
command -v sudo >/dev/null || sudo() { "$@"; }

# Create user idempotently  
create_user_idempotent() {
    getent passwd "$MYEXPORTER_USER" >/dev/null || 
        sudo useradd -m -s /bin/bash "$MYEXPORTER_USER"
}

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Error handling
error_exit() {
    log "ERROR: $1"
    exit 1
}

# Check if running as root or with sudo (allow idempotent runs)
check_privileges() {
    if [[ $EUID -ne 0 ]] && ! command -v sudo >/dev/null; then
        error_exit "This script must be run as root or with sudo available"
    fi
    log "Privilege check passed"
}

# Check if user already exists (idempotent)
check_existing_user() {
    if getent passwd "$MYEXPORTER_USER" >/dev/null 2>&1; then
        log "User $MYEXPORTER_USER already exists - verifying configuration"
        
        # Verify user configuration
        USER_HOME=$(getent passwd "$MYEXPORTER_USER" | cut -d: -f6)
        USER_SHELL=$(getent passwd "$MYEXPORTER_USER" | cut -d: -f7)
        
        if [[ "$USER_HOME" != "$MYEXPORTER_HOME" ]]; then
            log "WARNING: User home directory mismatch. Expected: $MYEXPORTER_HOME, Found: $USER_HOME"
        fi
        
        if [[ "$USER_SHELL" != "$MYEXPORTER_SHELL" ]]; then
            log "WARNING: User shell mismatch. Expected: $MYEXPORTER_SHELL, Found: $USER_SHELL"
        fi
        
        return 0
    fi
    
    log "User $MYEXPORTER_USER does not exist - will create"
    return 1
}

# Create MyExporter group
create_group() {
    if getent group "$MYEXPORTER_GROUP" &>/dev/null; then
        log "Group $MYEXPORTER_GROUP already exists"
        return 0
    fi
    
    log "Creating group: $MYEXPORTER_GROUP"
    groupadd "$MYEXPORTER_GROUP" || error_exit "Failed to create group $MYEXPORTER_GROUP"
    log "Group $MYEXPORTER_GROUP created successfully"
}

# Create MyExporter user (idempotent)
create_user() {
    log "Creating user: $MYEXPORTER_USER"
    
    # Create user with specific parameters for security (idempotent)
    if ! getent passwd "$MYEXPORTER_USER" >/dev/null 2>&1; then
        sudo useradd \
            --user-group \
            --create-home \
            --home-dir "$MYEXPORTER_HOME" \
            --shell "$MYEXPORTER_SHELL" \
            --comment "MyExporter Terminal Integration User" \
            --groups "$MYEXPORTER_GROUP" \
            "$MYEXPORTER_USER" 2>/dev/null || true
        
        if getent passwd "$MYEXPORTER_USER" >/dev/null 2>&1; then
            log "User $MYEXPORTER_USER created successfully"
        else
            error_exit "Failed to create user $MYEXPORTER_USER"
        fi
    else
        log "User $MYEXPORTER_USER already exists - skipping creation"
    fi
}

# Set up user environment
setup_user_environment() {
    log "Setting up user environment for $MYEXPORTER_USER"
    
    # Create .bashrc with minimal safe configuration
    cat > "$MYEXPORTER_HOME/.bashrc" << 'EOF'
# MyExporter User .bashrc - Minimal and Secure Configuration
# Generated by Initialize-WSLUser.sh

# Basic environment
export PATH="/usr/local/bin:/usr/bin:/bin"
export SHELL="/bin/bash"
export HOME="$HOME"
export USER="$USER"

# Terminal settings
export TERM="${TERM:-xterm-256color}"
export LANG="${LANG:-en_US.UTF-8}"

# MyExporter specific environment
export MYEXPORTER_USER=1
export MYEXPORTER_SESSION_TIMEOUT=3600
export MYEXPORTER_MAX_COMMANDS=100

# Safety aliases
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# Prompt configuration
PS1='[myexporter@\h:\w]\$ '

# Function to validate MyExporter commands
validate_command() {
    local cmd="$1"
    # Basic validation - can be enhanced with policy integration
    if [[ "$cmd" =~ (sudo|su|rm\ -rf|chmod\ 777|passwd) ]]; then
        echo "Command blocked by MyExporter policy: $cmd"
        return 1
    fi
    return 0
}

# Welcome message
echo "MyExporter Terminal Session Initialized"
echo "Session Timeout: ${MYEXPORTER_SESSION_TIMEOUT}s"
echo "Use 'exit' to close session"
EOF

    # Create .profile for login shells
    cat > "$MYEXPORTER_HOME/.profile" << 'EOF'
# MyExporter User .profile
# Generated by Initialize-WSLUser.sh

# Source .bashrc if it exists and we're in an interactive bash session
if [ -n "$BASH_VERSION" ] && [ -f "$HOME/.bashrc" ]; then
    . "$HOME/.bashrc"
fi

# Set PATH to include user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

# MyExporter session initialization
if [ -n "$MYEXPORTER_SESSION_ID" ]; then
    echo "MyExporter Session: $MYEXPORTER_SESSION_ID"
fi
EOF

    # Create tmux configuration
    cat > "$MYEXPORTER_HOME/.tmux.conf" << 'EOF'
# MyExporter tmux configuration
# Generated by Initialize-WSLUser.sh

# Basic settings
set -g default-shell /bin/bash
set -g default-terminal "screen-256color"

# Session settings
set -g base-index 1
set -g pane-base-index 1
set -g renumber-windows on

# Key bindings (minimal set)
bind r source-file ~/.tmux.conf \; display "Config reloaded"

# Status bar
set -g status-style "bg=green,fg=black"
set -g status-left "[MyExporter] "
set -g status-right "#H %Y-%m-%d %H:%M"

# Window titles
set -g set-titles on
set -g set-titles-string "MyExporter: #W"

# Security settings
set -g lock-after-time 3600
set -g lock-command "echo 'Session locked - contact administrator'"

# Logging for security audit
set -g history-file ~/.tmux_history
EOF

    # Set proper ownership and permissions
    chown -R "$MYEXPORTER_USER:$MYEXPORTER_GROUP" "$MYEXPORTER_HOME"
    chmod 750 "$MYEXPORTER_HOME"
    chmod 644 "$MYEXPORTER_HOME/.bashrc" "$MYEXPORTER_HOME/.profile" "$MYEXPORTER_HOME/.tmux.conf"
    
    log "User environment configured successfully"
}

# Create workspace directory
create_workspace() {
    local workspace_dir="$MYEXPORTER_HOME/workspace"
    
    log "Creating workspace directory: $workspace_dir"
    mkdir -p "$workspace_dir"
    
    # Create subdirectories
    mkdir -p "$workspace_dir/tmp"
    mkdir -p "$workspace_dir/logs"
    mkdir -p "$workspace_dir/scripts"
    
    # Set permissions
    chown -R "$MYEXPORTER_USER:$MYEXPORTER_GROUP" "$workspace_dir"
    chmod 755 "$workspace_dir"
    chmod 755 "$workspace_dir"/*
    
    log "Workspace directory created successfully"
}

# Configure sudo restrictions (if sudo is available)
configure_sudo_restrictions() {
    if ! command -v sudo &>/dev/null; then
        log "sudo not available - skipping sudo configuration"
        return 0
    fi
    
    log "Configuring sudo restrictions for $MYEXPORTER_USER"
    
    # Create sudoers file for MyExporter user with restrictions
    cat > "/etc/sudoers.d/myexporter" << EOF
# MyExporter sudo restrictions
# Generated by Initialize-WSLUser.sh

# Allow specific safe commands only
$MYEXPORTER_USER ALL=(ALL) NOPASSWD: /bin/ls, /bin/cat, /usr/bin/which, /bin/ps
$MYEXPORTER_USER ALL=(ALL) NOPASSWD: /usr/bin/tmux

# Deny dangerous commands explicitly
$MYEXPORTER_USER ALL=(ALL) !PASSWD: /bin/su, /usr/bin/sudo su, /bin/rm, /usr/bin/rm
$MYEXPORTER_USER ALL=(ALL) !PASSWD: /usr/sbin/shutdown, /usr/sbin/reboot, /usr/sbin/halt
$MYEXPORTER_USER ALL=(ALL) !PASSWD: /usr/bin/passwd

# Default deny for everything else
Defaults!NOPASSWD env_reset,secure_path="/usr/local/bin:/usr/bin:/bin"
EOF

    # Set proper permissions on sudoers file
    chmod 440 "/etc/sudoers.d/myexporter"
    
    # Validate sudoers syntax
    if sudo visudo -c; then
        log "Sudo configuration validated successfully"
    else
        error_exit "Invalid sudo configuration - removing sudoers file"
        rm -f "/etc/sudoers.d/myexporter"
    fi
}

# Create session management script
create_session_script() {
    local script_path="$MYEXPORTER_HOME/bin/start-session"
    
    log "Creating session management script: $script_path"
    
    mkdir -p "$MYEXPORTER_HOME/bin"
    
    cat > "$script_path" << 'EOF'
#!/bin/bash
# MyExporter Session Starter
# Generated by Initialize-WSLUser.sh

set -euo pipefail

# Session configuration
SESSION_NAME="${1:-myexporter}"
SESSION_TIMEOUT="${MYEXPORTER_SESSION_TIMEOUT:-3600}"
SESSION_ID="${MYEXPORTER_SESSION_ID:-$(uuidgen 2>/dev/null || date +%s)}"

# Export session variables
export MYEXPORTER_SESSION_ID="$SESSION_ID"
export MYEXPORTER_SESSION_NAME="$SESSION_NAME"
export MYEXPORTER_SESSION_START="$(date '+%Y-%m-%d %H:%M:%S')"

# Log session start
echo "Starting MyExporter session: $SESSION_ID"
echo "Session Name: $SESSION_NAME"
echo "Timeout: ${SESSION_TIMEOUT}s"
echo "Started: $MYEXPORTER_SESSION_START"

# Start tmux session
exec tmux new-session -d -s "$SESSION_NAME" -c "$HOME/workspace"
EOF

    chmod 755 "$script_path"
    chown "$MYEXPORTER_USER:$MYEXPORTER_GROUP" "$script_path"
    
    log "Session management script created successfully"
}

# Main execution
main() {
    log "Starting MyExporter WSL user initialization"
    
    # Pre-flight checks
    check_privileges
    
    # Check if already configured
    if check_existing_user; then
        log "User already exists - verifying configuration"
    else
        # Create user and group
        create_group
        create_user
    fi
    
    # Configure environment
    setup_user_environment
    create_workspace
    create_session_script
    configure_sudo_restrictions
    
    log "MyExporter WSL user initialization completed successfully"
    log "User: $MYEXPORTER_USER"
    log "Home: $MYEXPORTER_HOME"
    log "Group: $MYEXPORTER_GROUP"
    log "Log file: $LOG_FILE"
    
    echo ""
    echo "✅ MyExporter WSL user initialization complete"
    echo "   User: $MYEXPORTER_USER"
    echo "   Home: $MYEXPORTER_HOME"
    echo "   To test: sudo -u $MYEXPORTER_USER bash"
    echo "   To start session: sudo -u $MYEXPORTER_USER $MYEXPORTER_HOME/bin/start-session"
}

# Execute main function
main "$@"
