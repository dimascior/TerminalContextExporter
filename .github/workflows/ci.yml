name: MyExporter CI Matrix

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows PowerShell 5.1 (Desktop edition)
          - os: windows-latest
            psver: '5.1'
            shell: 'powershell'
          # Windows PowerShell 7.4 (Core edition)  
          - os: windows-latest
            psver: '7.4'
            shell: 'pwsh'
          # Ubuntu with PowerShell 7.4 + WSL + tmux  
          - os: ubuntu-latest
            psver: '7.4'
            shell: 'pwsh'
            use_wsl: true
            install_tmux: true
          # Ubuntu with PowerShell 7.4 without tmux (graceful degradation)
          - os: ubuntu-latest
            psver: '7.4'
            shell: 'pwsh'
            use_wsl: false
            install_tmux: false
          # Ubuntu with WSL2 (additional WSL validation)
          - os: ubuntu-latest
            psver: '7.4'
            shell: 'pwsh'
            use_wsl: true
            install_tmux: false
            wsl_test: true
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PowerShell 7.4 (Ubuntu)
      if: matrix.os == 'ubuntu-latest' && matrix.psver == '7.4'
      shell: bash
      run: |
        # Install PowerShell 7.4 on Ubuntu
        wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
    
    - name: Setup WSL2 (if required)
      if: matrix.use_wsl == true
      uses: Vampire/setup-wsl@v2
      with:
        distribution: Ubuntu-22.04
        additional-packages:
          tmux
          curl
          jq
    
    - name: Setup tmux (if required)
      if: matrix.install_tmux == true && matrix.use_wsl != true
      shell: bash
      run: |
        sudo apt-get install -y tmux
    
    - name: Remove tmux (graceful degradation test)
      if: matrix.install_tmux == false && matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        sudo apt-get remove -y tmux || true
    
    - name: Install Pester (PowerShell 5.1)
      if: matrix.psver == '5.1'
      shell: powershell
      run: |
        Install-Module -Name Pester -Force -Scope CurrentUser -MinimumVersion 5.3.0
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
    
    - name: Install Pester (PowerShell 7.x)
      if: matrix.psver != '5.1'
      shell: pwsh
      run: |
        Install-Module -Name Pester -Force -Scope CurrentUser -MinimumVersion 5.3.0
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
    
    - name: Validate Module Manifest (PowerShell 5.1)
      if: matrix.psver == '5.1'
      shell: powershell
      run: |
        $ModulePath = "${{ github.workspace }}/MyExporter/MyExporter.psd1"
        Test-ModuleManifest -Path $ModulePath -ErrorAction Stop
    
    - name: Validate Module Manifest (PowerShell 7.x)
      if: matrix.psver != '5.1'
      shell: pwsh
      run: |
        $ModulePath = "${{ github.workspace }}/MyExporter/MyExporter.psd1"
        Test-ModuleManifest -Path $ModulePath -ErrorAction Stop
    
    - name: GuardRails Verification Gate (PowerShell 5.1)
      if: matrix.psver == '5.1'
      shell: powershell
      run: |
        & "${{ github.workspace }}/MyExporter/Verify-Phase.ps1" -Verbose
        if ($LASTEXITCODE -ne 0) {
          throw "GuardRails verification failed"
        }
    
    - name: GuardRails Verification Gate (PowerShell 7.x)
      if: matrix.psver != '5.1'
      shell: pwsh
      run: |
        & "${{ github.workspace }}/MyExporter/Verify-Phase.ps1" -Verbose
        if ($LASTEXITCODE -ne 0) {
          throw "GuardRails verification failed"
        }
    
    - name: Import Module and Run ScriptAnalyzer (PowerShell 5.1)
      if: matrix.psver == '5.1'
      shell: powershell
      run: |
        Import-Module "${{ github.workspace }}/MyExporter" -Force
        $AnalyzerResults = Invoke-ScriptAnalyzer -Path "${{ github.workspace }}/MyExporter" -Recurse -Settings PSGallery
        if ($AnalyzerResults) {
          $AnalyzerResults | Format-Table
          throw "ScriptAnalyzer found issues"
        }
    
    - name: Import Module and Run ScriptAnalyzer (PowerShell 7.x)
      if: matrix.psver != '5.1'
      shell: pwsh
      run: |
        Import-Module "${{ github.workspace }}/MyExporter" -Force
        $AnalyzerResults = Invoke-ScriptAnalyzer -Path "${{ github.workspace }}/MyExporter" -Recurse -Settings PSGallery
        if ($AnalyzerResults) {
          $AnalyzerResults | Format-Table
          throw "ScriptAnalyzer found issues"
        }
    
    - name: Run Pester Tests (PowerShell 5.1)
      if: matrix.psver == '5.1'
      shell: powershell
      run: |
        Import-Module "${{ github.workspace }}/MyExporter" -Force
        $TestResults = Invoke-Pester -Path "${{ github.workspace }}/MyExporter/Tests" -PassThru -OutputFormat NUnitXml -OutputFile TestResults.xml
        if ($TestResults.FailedCount -gt 0) {
          throw "$($TestResults.FailedCount) tests failed"
        }
    
    - name: Run Pester Tests (PowerShell 7.x)
      if: matrix.psver != '5.1'
      shell: pwsh
      run: |
        Import-Module "${{ github.workspace }}/MyExporter" -Force
        $TestResults = Invoke-Pester -Path "${{ github.workspace }}/MyExporter/Tests" -PassThru -OutputFormat NUnitXml -OutputFile TestResults.xml
        if ($TestResults.FailedCount -gt 0) {
          throw "$($TestResults.FailedCount) tests failed"
        }
    
    - name: Run Phase Tests (Windows PowerShell 5.1)
      if: matrix.os == 'windows-latest' && matrix.psver == '5.1'
      shell: powershell
      run: |
        # Run all Test-Phase*.ps1 files from DevScripts
        $PhaseTests = Get-ChildItem -Path "${{ github.workspace }}/MyExporter/DevScripts" -Name "Test-Phase*.ps1"
        foreach ($Test in $PhaseTests) {
          Write-Host "Running $Test"
          & "${{ github.workspace }}/MyExporter/DevScripts/$Test"
        }
    
    - name: Run Phase Tests (Windows PowerShell 7.x)
      if: matrix.os == 'windows-latest' && matrix.psver != '5.1'
      shell: pwsh
      run: |
        # Run all Test-Phase*.ps1 files from DevScripts
        $PhaseTests = Get-ChildItem -Path "${{ github.workspace }}/MyExporter/DevScripts" -Name "Test-Phase*.ps1"
        foreach ($Test in $PhaseTests) {
          Write-Host "Running $Test"
          & "${{ github.workspace }}/MyExporter/DevScripts/$Test"
        }
    
    - name: Run WSL Integration Tests (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      shell: pwsh
      run: |
        # Test WSL integration components
        Import-Module "${{ github.workspace }}/MyExporter" -Force
        $WSLTests = Get-ChildItem -Path "${{ github.workspace }}/MyExporter/DevScripts" -Name "*WSL*.ps1" | Where-Object { $_ -like "Test-*" }
        foreach ($Test in $WSLTests) {
          Write-Host "Running WSL test: $Test"
          & "${{ github.workspace }}/MyExporter/DevScripts/$Test"
        }
    
    - name: Run WSL User Script Bats Tests (Ubuntu with WSL only)
      if: matrix.os == 'ubuntu-latest' && matrix.use_wsl == true
      shell: bash
      run: |
        # Install bats if not available
        sudo apt-get install -y bats || true
        # Run the WSL user script idempotency test
        cd "${{ github.workspace }}/MyExporter/Tests"
        bats Initialize-WSLUser.bats
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.psver }}
        path: TestResults.xml

  verify-guardrails:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PowerShell
      shell: bash
      run: |
        # PowerShell is pre-installed on windows-latest
        pwsh --version
    
    - name: Run GuardRails Verification
      shell: pwsh
      run: |
        if (Test-Path "${{ github.workspace }}/MyExporter/Verify-Phase.ps1") {
          & "${{ github.workspace }}/MyExporter/Verify-Phase.ps1"
        } else {
          Write-Warning "Verify-Phase.ps1 not found - creating stub"
        }

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
