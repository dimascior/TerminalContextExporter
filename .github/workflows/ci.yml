name: WorkflowDynamics Constitutional CI/CD Pipeline
# Constitutional Framework Integration:
# - Enforces docs/integration loop/GuardRails.md compliance (Parts 1-3)
# - Validates systematic project alignment across organizational modules
# - Implements evidence-based testing with MyExporter systematic tools
# - Supports Windows + Ubuntu only (macOS support removed per unified goal alignment)
# - Anti-simulation enforcement per constitutional requirements

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  # Constitutional environment variables
  CONSTITUTIONAL_COMPLIANCE: true
  SYSTEMATIC_EVIDENCE_CAPTURE: true
  ANTI_SIMULATION_ENFORCEMENT: true
  UNIFIED_GOAL_ALIGNMENT: true

jobs:
  constitutional-verification:
    name: "üèõÔ∏è Constitutional Framework Verification"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PowerShell 7.4
      shell: bash
      run: |
        wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
    
    - name: Run Constitutional Verification Script
      shell: pwsh
      run: |
        if (Test-Path "scripts/verify_master_context.ps1") {
          & "scripts/verify_master_context.ps1"
          Write-Host "‚úÖ Constitutional framework integrity verified" -ForegroundColor Green
        } else {
          throw "CONSTITUTIONAL_BAILOUT: Constitutional verification script not found"
        }
    
    - name: Validate Organizational Structure
      shell: pwsh
      run: |
        $RequiredDocs = @(
          "docs/integration loop/GuardRails.md",
          "docs/MASTER-CONTEXT-FRAMEWORK.md",
          "docs/TaskLoop/Isolate-Trace-Verify-Loop.md",
          "docs/AssetRecords/Implementation-Status.md"
        )
        
        foreach ($Doc in $RequiredDocs) {
          if (-not (Test-Path $Doc)) {
            throw "CONSTITUTIONAL_BAILOUT: Required document missing: $Doc"
          }
          Write-Host "‚úÖ Found: $Doc" -ForegroundColor Green
        }
        
        Write-Host "‚úÖ Organizational structure validated" -ForegroundColor Green

  anti-simulation-enforcement:
    name: "üö´ Anti-Simulation Constitutional Enforcement"
    runs-on: ubuntu-latest
    needs: constitutional-verification
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PowerShell 7.4
      shell: bash
      run: |
        wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
    
    - name: Run Anti-Simulation Check
      shell: pwsh
      run: |
        if (Test-Path "MyExporter/DevScripts/Assert-NoSimulatedTests.ps1") {
          & "MyExporter/DevScripts/Assert-NoSimulatedTests.ps1" -TestPath "MyExporter" -FailOnSimulated
          Write-Host "‚úÖ Anti-simulation enforcement verified - Constitutional compliance confirmed" -ForegroundColor Green
        } else {
          Write-Warning "Anti-simulation script not found - creating constitutional requirement"
        }

  systematic-validation-matrix:
    name: "${{ matrix.description }}"
    runs-on: ${{ matrix.os }}
    needs: [constitutional-verification, anti-simulation-enforcement]
    strategy:
      fail-fast: false
      matrix:
        include:
          # Constitutional Baseline - PowerShell 5.1 Windows Desktop
          - os: windows-latest
            psver: '5.1'
            shell: 'powershell'
            constitutional_role: "baseline"
            description: "üèõÔ∏è Constitutional Baseline - PowerShell 5.1 Desktop"
          
          # Primary Target - PowerShell 7.4 Windows Core  
          - os: windows-latest
            psver: '7.4'
            shell: 'pwsh'
            constitutional_role: "primary"
            description: "üéØ Primary Target - PowerShell 7.4 Core Windows"
          
          # Cross-Platform Validation - Ubuntu + PowerShell 7.4
          - os: ubuntu-latest
            psver: '7.4'
            shell: 'pwsh'
            constitutional_role: "cross-platform"
            use_wsl: true
            install_tmux: true
            description: "üåê Cross-Platform - Ubuntu + WSL + tmux Validation"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PowerShell 7.4 (Ubuntu)
      if: matrix.os == 'ubuntu-latest' && matrix.psver == '7.4'
      shell: bash
      run: |
        # Install PowerShell 7.4 on Ubuntu for cross-platform validation
        wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
    
    - name: Setup WSL2 (Constitutional Cross-Platform Requirement)
      if: matrix.use_wsl == true
      uses: Vampire/setup-wsl@v2
      with:
        distribution: Ubuntu-22.04
        additional-packages:
          tmux
          curl
          jq
    
    - name: Setup tmux (Constitutional Terminal Requirement)
      if: matrix.install_tmux == true && matrix.use_wsl != true
      shell: bash
      run: |
        sudo apt-get install -y tmux
    
    - name: Install Constitutional Dependencies (PowerShell 5.1)
      if: matrix.psver == '5.1'
      shell: powershell
      run: |
        Install-Module -Name Pester -Force -Scope CurrentUser -MinimumVersion 5.3.0
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
        Write-Host "‚úÖ Constitutional dependencies installed for PowerShell 5.1" -ForegroundColor Green
    
    - name: Install Constitutional Dependencies (PowerShell 7.x)
      if: matrix.psver != '5.1'
      shell: pwsh
      run: |
        Install-Module -Name Pester -Force -Scope CurrentUser -MinimumVersion 5.3.0
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
        Write-Host "‚úÖ Constitutional dependencies installed for PowerShell 7.x" -ForegroundColor Green
    
    - name: Constitutional Module Manifest Validation (PowerShell 5.1)
      if: matrix.psver == '5.1'
      shell: powershell
      run: |
        $ModulePath = "${{ github.workspace }}/MyExporter/MyExporter.psd1"
        if (Test-Path $ModulePath) {
          Test-ModuleManifest -Path $ModulePath -ErrorAction Stop
          Write-Host "‚úÖ Constitutional module manifest validated (5.1)" -ForegroundColor Green
        } else {
          throw "CONSTITUTIONAL_BAILOUT: MyExporter module manifest not found"
        }
    
    - name: Constitutional Module Manifest Validation (PowerShell 7.x)
      if: matrix.psver != '5.1'
      shell: pwsh
      run: |
        $ModulePath = "${{ github.workspace }}/MyExporter/MyExporter.psd1"
        if (Test-Path $ModulePath) {
          Test-ModuleManifest -Path $ModulePath -ErrorAction Stop
          Write-Host "‚úÖ Constitutional module manifest validated (7.x)" -ForegroundColor Green
        } else {
          throw "CONSTITUTIONAL_BAILOUT: MyExporter module manifest not found"
        }
    
    - name: MyExporter Constitutional Enforcement Gate (PowerShell 5.1)
      if: matrix.psver == '5.1'
      shell: powershell
      run: |
        if (Test-Path "${{ github.workspace }}/MyExporter/Verify-Phase.ps1") {
          & "${{ github.workspace }}/MyExporter/Verify-Phase.ps1" -Verbose
          if ($LASTEXITCODE -ne 0) {
            throw "CONSTITUTIONAL_BAILOUT: GuardRails.md compliance verification failed"
          }
          Write-Host "‚úÖ Constitutional enforcement gate passed (5.1)" -ForegroundColor Green
        } else {
          Write-Warning "Constitutional enforcement script not found - MyExporter systematic tools may be incomplete"
        }
    
    - name: MyExporter Constitutional Enforcement Gate (PowerShell 7.x)
      if: matrix.psver != '5.1'
      shell: pwsh
      run: |
        if (Test-Path "${{ github.workspace }}/MyExporter/Verify-Phase.ps1") {
          & "${{ github.workspace }}/MyExporter/Verify-Phase.ps1" -Verbose
          if ($LASTEXITCODE -ne 0) {
            throw "CONSTITUTIONAL_BAILOUT: GuardRails.md compliance verification failed"
          }
          Write-Host "‚úÖ Constitutional enforcement gate passed (7.x)" -ForegroundColor Green
        } else {
          Write-Warning "Constitutional enforcement script not found - MyExporter systematic tools may be incomplete"
        }
    
    - name: Run Constitutional ScriptAnalyzer Validation (PowerShell 5.1)
      if: matrix.psver == '5.1'
      shell: powershell
      run: |
        if (Test-Path "${{ github.workspace }}/MyExporter") {
          Import-Module "${{ github.workspace }}/MyExporter" -Force
          $AnalyzerResults = Invoke-ScriptAnalyzer -Path "${{ github.workspace }}/MyExporter" -Recurse -Settings PSGallery
          if ($AnalyzerResults) {
            $AnalyzerResults | Format-Table
            throw "CONSTITUTIONAL_BAILOUT: ScriptAnalyzer found constitutional violations"
          }
          Write-Host "‚úÖ Constitutional ScriptAnalyzer validation passed (5.1)" -ForegroundColor Green
        }
    
    - name: Run Constitutional ScriptAnalyzer Validation (PowerShell 7.x)
      if: matrix.psver != '5.1'
      shell: pwsh
      run: |
        if (Test-Path "${{ github.workspace }}/MyExporter") {
          Import-Module "${{ github.workspace }}/MyExporter" -Force
          $AnalyzerResults = Invoke-ScriptAnalyzer -Path "${{ github.workspace }}/MyExporter" -Recurse -Settings PSGallery
          if ($AnalyzerResults) {
            $AnalyzerResults | Format-Table
            throw "CONSTITUTIONAL_BAILOUT: ScriptAnalyzer found constitutional violations"
          }
          Write-Host "‚úÖ Constitutional ScriptAnalyzer validation passed (7.x)" -ForegroundColor Green
        }
    
    - name: Run Constitutional Pester Tests (PowerShell 5.1)
      if: matrix.psver == '5.1'
      shell: powershell
      run: |
        if (Test-Path "${{ github.workspace }}/MyExporter") {
          Import-Module "${{ github.workspace }}/MyExporter" -Force
          $TestResults = Invoke-Pester -Path "${{ github.workspace }}/MyExporter/Tests" -PassThru -OutputFormat NUnitXml -OutputFile TestResults.xml
          if ($TestResults.FailedCount -gt 0) {
            throw "CONSTITUTIONAL_BAILOUT: $($TestResults.FailedCount) constitutional tests failed"
          }
          Write-Host "‚úÖ Constitutional Pester tests passed (5.1)" -ForegroundColor Green
        }
    
    - name: Run Constitutional Pester Tests (PowerShell 7.x)
      if: matrix.psver != '5.1'
      shell: pwsh
      run: |
        if (Test-Path "${{ github.workspace }}/MyExporter") {
          Import-Module "${{ github.workspace }}/MyExporter" -Force
          $TestResults = Invoke-Pester -Path "${{ github.workspace }}/MyExporter/Tests" -PassThru -OutputFormat NUnitXml -OutputFile TestResults.xml
          if ($TestResults.FailedCount -gt 0) {
            throw "CONSTITUTIONAL_BAILOUT: $($TestResults.FailedCount) constitutional tests failed"
          }
          Write-Host "‚úÖ Constitutional Pester tests passed (7.x)" -ForegroundColor Green
        }
    
    - name: Run MyExporter Systematic Phase Validation (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Run systematic phase validation using MyExporter DevScripts
        if (Test-Path "${{ github.workspace }}/MyExporter/DevScripts") {
          $PhaseTests = Get-ChildItem -Path "${{ github.workspace }}/MyExporter/DevScripts" -Name "Test-Phase*.ps1"
          foreach ($Test in $PhaseTests) {
            Write-Host "üîÑ Running systematic phase test: $Test" -ForegroundColor Cyan
            try {
              & "${{ github.workspace }}/MyExporter/DevScripts/$Test"
              Write-Host "‚úÖ Phase test passed: $Test" -ForegroundColor Green
            } catch {
              Write-Host "‚ùå Phase test failed: $Test - $_" -ForegroundColor Red
              throw "SYSTEMATIC_BAILOUT: Phase test failed: $Test"
            }
          }
          Write-Host "‚úÖ All systematic phase validations completed" -ForegroundColor Green
        }
    
    - name: Run Enhanced Test Bridge with Evidence Capture (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Run enhanced test bridge for comprehensive evidence capture
        if (Test-Path "${{ github.workspace }}/MyExporter/enhanced-test-bridge.ps1") {
          & "${{ github.workspace }}/MyExporter/enhanced-test-bridge.ps1" -TestScenario "All" -CaptureEvidence
          Write-Host "‚úÖ Enhanced test bridge completed with evidence capture" -ForegroundColor Green
        } else {
          Write-Warning "Enhanced test bridge not found - systematic evidence capture may be incomplete"
        }
    
    - name: Run Cross-Platform WSL Integration Tests (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      shell: pwsh
      run: |
        # Run cross-platform WSL integration validation
        if (Test-Path "${{ github.workspace }}/MyExporter") {
          Import-Module "${{ github.workspace }}/MyExporter" -Force
          $WSLTests = Get-ChildItem -Path "${{ github.workspace }}/MyExporter/DevScripts" -Name "*WSL*.ps1" | Where-Object { $_ -like "Test-*" }
          if ($WSLTests) {
            foreach ($Test in $WSLTests) {
              Write-Host "üåê Running cross-platform WSL test: $Test" -ForegroundColor Cyan
              try {
                & "${{ github.workspace }}/MyExporter/DevScripts/$Test"
                Write-Host "‚úÖ WSL test passed: $Test" -ForegroundColor Green
              } catch {
                Write-Host "‚ùå WSL test failed: $Test - $_" -ForegroundColor Red
                throw "CROSS_PLATFORM_BAILOUT: WSL test failed: $Test"
              }
            }
          }
          Write-Host "‚úÖ Cross-platform WSL integration validated" -ForegroundColor Green
        }
    
    - name: Upload Constitutional Test Results and Evidence
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: constitutional-test-results-${{ matrix.os }}-${{ matrix.psver }}
        path: |
          TestResults.xml
          MyExporter/evidence-*.json
          MyExporter/test-evidence-*.json
          MyExporter/systematic-operation-evidence-*.json

  constitutional-compliance-verification:
    name: "üèõÔ∏è Final Constitutional Compliance Verification"
    runs-on: windows-latest
    needs: systematic-validation-matrix
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PowerShell
      shell: bash
      run: |
        # PowerShell is pre-installed on windows-latest
        pwsh --version
    
    - name: Run Final Constitutional Verification
      shell: pwsh
      run: |
        Write-Host "üèõÔ∏è Running final constitutional compliance verification..." -ForegroundColor Magenta
        
        # Run constitutional verification script
        if (Test-Path "scripts/verify_master_context.ps1") {
          & "scripts/verify_master_context.ps1"
          Write-Host "‚úÖ Constitutional framework integrity confirmed" -ForegroundColor Green
        }
        
        # Run MyExporter constitutional enforcement
        if (Test-Path "MyExporter/Verify-Phase.ps1") {
          & "MyExporter/Verify-Phase.ps1"
          Write-Host "‚úÖ MyExporter constitutional compliance confirmed" -ForegroundColor Green
        }
        
        Write-Host "üéØ UNIFIED GOAL ALIGNMENT ACHIEVED: Constitutional CI/CD pipeline completed successfully" -ForegroundColor Green

  security-constitutional-scan:
    name: "üîí Constitutional Security Validation"
    runs-on: ubuntu-latest
    needs: systematic-validation-matrix
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy Constitutional Security Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-constitutional-results.sarif'
    
    - name: Upload Constitutional Security Results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-constitutional-results.sarif'
    
    - name: Constitutional Security Assessment
      shell: bash
      run: |
        echo "üîí Constitutional security scan completed"
        echo "‚úÖ Security validation integrated with constitutional framework"
