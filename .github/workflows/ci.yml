name: MyExporter CI Matrix

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-22.04]
        pwsh-version: ['5.1', '7.4']
        exclude:
          # PowerShell 5.1 only runs on Windows
          - os: ubuntu-22.04
            pwsh-version: '5.1'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PowerShell 7.4 (if required)
      if: matrix.pwsh-version == '7.4' && matrix.os == 'ubuntu-22.04'
      shell: bash
      run: |
        # Install PowerShell 7.4 on Ubuntu
        wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
    
    - name: Setup WSL (Ubuntu only)
      if: matrix.os == 'ubuntu-22.04'
      uses: Vampire/setup-wsl@v2
      with:
        distribution: Ubuntu-22.04
        additional-packages:
          tmux
          curl
          jq
          yamllint
    
    - name: Install Pester
      shell: pwsh
      run: |
        Install-Module -Name Pester -Force -Scope CurrentUser -MinimumVersion 5.3.0
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
    
    - name: Validate Module Manifest
      shell: pwsh
      run: |
        $ModulePath = "${{ github.workspace }}/MyExporter/MyExporter.psd1"
        Test-ModuleManifest -Path $ModulePath -ErrorAction Stop
    
    - name: Import Module and Run ScriptAnalyzer
      shell: pwsh
      run: |
        Import-Module "${{ github.workspace }}/MyExporter" -Force
        $AnalyzerResults = Invoke-ScriptAnalyzer -Path "${{ github.workspace }}/MyExporter" -Recurse -Settings PSGallery
        if ($AnalyzerResults) {
          $AnalyzerResults | Format-Table
          throw "ScriptAnalyzer found issues"
        }
    
    - name: Run Pester Tests
      shell: pwsh
      run: |
        Import-Module "${{ github.workspace }}/MyExporter" -Force
        $TestResults = Invoke-Pester -Path "${{ github.workspace }}/MyExporter/Tests" -PassThru -OutputFormat NUnitXml -OutputFile TestResults.xml
        if ($TestResults.FailedCount -gt 0) {
          throw "$($TestResults.FailedCount) tests failed"
        }
    
    - name: Run Phase Tests (Windows only)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Run all Test-Phase*.ps1 files
        $PhaseTests = Get-ChildItem -Path "${{ github.workspace }}/MyExporter" -Name "Test-Phase*.ps1"
        foreach ($Test in $PhaseTests) {
          Write-Host "Running $Test"
          & "${{ github.workspace }}/MyExporter/$Test"
        }
    
    - name: Run WSL Integration Tests (Ubuntu only)
      if: matrix.os == 'ubuntu-22.04'
      shell: pwsh
      run: |
        # Test WSL integration components
        Import-Module "${{ github.workspace }}/MyExporter" -Force
        $WSLTests = Get-ChildItem -Path "${{ github.workspace }}/MyExporter" -Name "*WSL*.ps1" | Where-Object { $_ -like "Test-*" }
        foreach ($Test in $WSLTests) {
          Write-Host "Running WSL test: $Test"
          & "${{ github.workspace }}/MyExporter/$Test"
        }
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.pwsh-version }}
        path: TestResults.xml

  verify-guardrails:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PowerShell
      shell: bash
      run: |
        # PowerShell is pre-installed on windows-latest
        pwsh --version
    
    - name: Run GuardRails Verification
      shell: pwsh
      run: |
        if (Test-Path "${{ github.workspace }}/MyExporter/Verify-Phase.ps1") {
          & "${{ github.workspace }}/MyExporter/Verify-Phase.ps1"
        } else {
          Write-Warning "Verify-Phase.ps1 not found - creating stub"
        }

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
